//
// Copyright Â© 2021 Solus Project <copyright@getsol.us>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package v2

// BaseLabel is the string key used for values related to the base package
const BaseLabel = "*"

// PackageDeps includes the dependencies required for the Build, Check, and Run Stages
type PackageDeps struct {
	Build map[string][]string
	Check map[string][]string
	Run   map[string][]string
}

// NewPackageDeps returns an empty PackageDeps, with properly initialized maps
func NewPackageDeps() PackageDeps {
	return PackageDeps{
		Build: make(map[string][]string),
		Check: make(map[string][]string),
		Run:   make(map[string][]string),
	}
}

// BuildFlags are special options that configure the build process
type BuildFlags struct {
	AutoDep    string
	AVX2       string
	Clang      string
	CCache     string
	Debug      string
	Devel      string
	Emul32     string
	Extract    string
	LAStrip    string
	Networking string
	Optimize   []string
	Strip      string
}

// DefaultBuildFlags represents the default values for all build flags, unless overwritten
var DefaultBuildFlags = BuildFlags{
	AutoDep:    "yes",
	AVX2:       "no",
	CCache:     "yes",
	Clang:      "no",
	Debug:      "yes",
	Devel:      "no",
	Emul32:     "no",
	Extract:    "yes",
	LAStrip:    "yes",
	Networking: "no",
	Strip:      "yes",
}

// BuildStages represent the scripted commands to execute for each stage of the build process
type BuildStages struct {
	Setup   string
	Build   string
	Profile string
	Check   string
	Install string
}

// Package is the intermediate representation of all formats of the Package YML specification
type Package struct {
	Name         string
	Version      string
	Release      uint
	Source       []map[string]string
	Homepage     string
	License      map[string][]string
	Component    map[string][]string
	Summary      map[string][]string
	Description  map[string][]string
	Flags        BuildFlags
	Environment  map[string]string
	Dependencies PackageDeps
	Stages       BuildStages
	Patterns     map[string][]string
}
